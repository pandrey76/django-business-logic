
    Основный задачи проекта.

//////////////////////////////////////////////////////////////////////////////////

    Есть три вида рассылок:

        Первый вид рассылок это общие рассылки, т.е на все материалы.
        Второй вид рассылок это рассылки по конкретному делу.
        Третий вид рассылок это рассылки по донатам.

    Для этого создадим соответствующие джанго приложения.

//////////////////////////////////////////////////////////////////////////////////

admin1@ubuntu18:~/work/Education/python/django-business-logic$ . env/bin/activate
(env) admin1@ubuntu18:~/work/Education/python/django-business-logic$ cd src
(env) admin1@ubuntu18:~/work/Education/python/django-business-logic/src$ ./manage.py startapp cases
(env) admin1@ubuntu18:~/work/Education/python/django-business-logic/src$ ./manage.py startapp mailings
(env) admin1@ubuntu18:~/work/Education/python/django-business-logic/src$ ./manage.py startapp donations

//////////////////////////////////////////////////////////////////////////////////

Делаем миграции:

//////////////////////////////////////////////////////////////////////////////////

(env) admin1@ubuntu18:~/work/Education/python/django-business-logic/src$ ./manage.py makemigrations
Migrations for 'cases':
  cases/migrations/0001_initial.py
    - Create model Case
Migrations for 'mailings':
  mailings/migrations/0001_initial.py
    - Create model CommonMailingList
    - Create model CaseMailingList
(env) admin1@ubuntu18:~/work/Education/python/django-business-logic/src$ ./manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, cases, contenttypes, mailings, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying cases.0001_initial... OK
  Applying mailings.0001_initial... OK
  Applying sessions.0001_initial... OK

//////////////////////////////////////////////////////////////////////////////////

Модели данных данных есть, теперь делаем вьюшки.

Рассылки у нас будут выполнятся через mailchimp, пароль и логин от mailchimp мы будем
хранить в файле setting.py, а точнее в переменных окружения.

Рассылки в mailchimp будути происходить на основании аудиторий, т.е. в mailchimp есть такое
понятие как аудитория, это можно назвать листом рассылок. У нас будет отдельный лист рассылок
для общих рассылок, назовём его "common", и отдельный лист рассылок, назовём его "cases", это рассылки
для материалов по конкретным делам и в рамках этих аудиторий есть конкретные теги, при помощи которых
мы можем разделять наших подписчиков ещё каким-то образом, другими словами мы будем навешивать еще
какие-то тэги, т.е. например когда у нас подписывается человек на какое-то конкретное дело мы навесим ему тэг
с идентификатором этого дела, или с названием этого дела, например чтобы в mailchimp в последствии
мы могли настроить отдельный блок рассылок на коннкретный тэг. другими словами у нас есть аудитории и есть
тэги.

Первый вариант ПО будет выполнено в стиле новичка (по хардкору) лишбы это всё работало.
Т.е. всю логтку мы отправляем во view слой.

Далее нам надо получить mailchimp клиента и послать в mailchimp запрос на добавление данных в общий лист
рассылок

Mailchimp url проекта:
    https://github.com/VingtCinq/python-mailchimp

Устанавливаем mailchimp клиент:
//////////////////////////////////////////////////////////////////////////////////
(env) admin1@ubuntu18:~/work/Education/python/django-business-logic/src$ pip3 install mailchimp3
//////////////////////////////////////////////////////////////////////////////////

Фиксируем пакеты
//////////////////////////////////////////////////////////////////////////////////
(env) admin1@ubuntu18:~/work/Education/python/django-business-logic/src$ pip3 freeze > ../requirements.txt
//////////////////////////////////////////////////////////////////////////////////


Добавив во view слой всю бизнес логику (add_to_common_list_view), мы получили архитектуру, которую протестить
можно одним единственным образом, это вызывать саму view "add_to_common_list_view" слать http запрос и проверять,
что он отработает. Никаких других вариантов это протестить нет. Но здесь куча кода, который тестировать надо отдельно:

1. Логика проверки email;
2. Создание mailchimp клиента;
3. Добавлению в mailchimp аудиторию нового email;
4. Получения subscriber_hash;
5. Добавление тэга на email клиента;
6. Добавление email в базу данных.

Для нашего кода надо написать кучу тестов. На каждую часть логики должен быть отдельный тест case.

    Сейчас мы написали кучу строчек кода относящихся к mailchimp рассылкам, вывели всю логику в отдельные функции
(_get_mailchimp_client, _add_email_to_mailchimp_audience, _get_mailchimp_subscribed_hash, _add_mailchimp_tag,
_add_mailchimp_email_with_tag) и они лежат во views.py это конечно не правильно, все эти фнкции должны вызыватся
из другого места. У нас есть приложение Джанго "Mailings" в нем акомулированна работа с email рассылками. Любое
другое наше приложение может использовать email рассылки, например приложение "donations" когда человек платит
донат, нам нужно добавить его в лист рассылки, т.е. модуль "donations" будет вызывать в каком-то виде методы из
приложения "mailings", т.е. какие-то его бизнес-сервисы. Если она будет импортироапть их из файла views.py, то
вроде как это не правильно, т.к. она будет импортировать view слой, но это не логика view это имено бизнес логика.
Поэтому все эти функции должны быть вынесены в слой бизнес-логики. Мы назовём их "Services" многие называют это
"UseCases" но это не важно, но всё-таки "Services"  это более правильное название. Если бизнес логики много,
то рекомендуется создаваать пакет (Python Package) "Servicer" и внутри его создаются соответствующие модули, в данном
конкретно нашем случае их не много, так что мы создадим обычный Python файл и назовём его mailchimp_services.



